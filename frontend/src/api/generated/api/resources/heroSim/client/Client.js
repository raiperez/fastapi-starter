/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TokuAssignmentApi } from "../../../..";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as core from "../../../../core";
import * as errors from "../../../../errors";
export class HeroSim {
    options;
    constructor(options) {
        this.options = options;
    }
    /**
     * Queue N simulations of fights between 2 heroes
     * @throws {TokuAssignmentApi.InvalidRequestError}
     */
    async runSimulation(request) {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "/consumer/simulate"),
            method: "POST",
            contentType: "application/json",
            body: await serializers.RunSimulationRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
        });
        if (_response.ok) {
            return await serializers.RunSimulationResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }
        if (_response.error.reason === "status-code") {
            switch (_response.error.body?.["error"]) {
                case "InvalidRequestError":
                    throw new TokuAssignmentApi.InvalidRequestError(await serializers.ErrorBody.parseOrThrow(_response.error.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                    }));
                default:
                    throw new errors.TokuAssignmentApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }
        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TokuAssignmentApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.TokuAssignmentApiTimeoutError();
            case "unknown":
                throw new errors.TokuAssignmentApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
